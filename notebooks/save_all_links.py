# -*- coding: utf-8 -*-
"""save_all_links.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sjgKatTq-1sWaWI9gyGLK1E_BWTFXKs-
"""

#@markdown ## ⚠️ PLEASE NOTE:
#@markdown This colab runs best using a GPU runtime.  From the Colab menu, choose Runtime > Change Runtime Type, then select **'GPU'** in the dropdown.

import functools
import jax
import os

from datetime import datetime
from jax import numpy as jp
import matplotlib.pyplot as plt

from IPython.display import HTML, clear_output

# try:
#   !pip uninstall -y brax
#   !pip install git+https://github.com/izo0619/brax.git@mod_hopper
#   # !pip install git+https://github.com/google/brax.git@main
#   import brax
#   # clear_output()
# except ImportError:
#   #!pip install git+https://github.com/google/brax.git@main
#   !pip install git+https://github.com/izo0619/brax.git@three_legs
#   clear_output()
#   import brax
import brax
import flax
from brax import envs
from brax.io import model
from brax.io import json
from brax.io import html
from brax.io import image
from brax.training.agents.ppo import train as ppo
from brax.training.agents.sac import train as sac

from PIL import Image, ImageSequence
import io
from pytinyrenderer import TinyRenderCamera as Camera

#@title Load Env { run: "auto" }

env_name = 'links'  # @param ['swimmer','links', 'ant', 'halfcheetah', 'hopper', 'humanoid', 'humanoidstandup', 'inverted_pendulum', 'inverted_double_pendulum', 'pusher', 'reacher', 'walker2d']
backend = 'generalized'  # @param ['generalized', 'positional', 'spring']

for i in range(5):
  print(i)
  env = envs.get_environment(env_name=env_name,
                           i=i,
                           backend=backend)
  state = jax.jit(env.reset)(rng=jax.random.PRNGKey(seed=0))
  # print(state.pipeline_state)
  # print(env.sys.geoms)
  # print(html.render(env.sys, [state.pipeline_state]))
  html_string = html.render(env.sys, [state.pipeline_state])
  html.save(f"../output/html_static/random_morph_{i}.html", env.sys, [state.pipeline_state])

  hfov = 38.0
  vfov = hfov * 500 / 500
  camera = Camera(
          viewWidth=500,
          viewHeight=500,
          position=[2, -8, 2],
          target=state.pipeline_state.x.pos[0, :],
          up=[0, 0, 1],
          hfov=hfov,
          vfov=vfov)

  output = image.render(env.sys, [state.pipeline_state], 500, 500, cameras=[camera], ssaa=10)
  img = Image.open(io.BytesIO(output))
  img.save(f"../output/png/random_morph_{i}.png")
  img.show()
  HTML(html_string)

  env = envs.create(env_name=env_name, i=i, backend=backend)

  jit_env_reset = jax.jit(env.reset)
  jit_env_step = jax.jit(env.step)

  rollout = []
  rng = jax.random.PRNGKey(seed=1)
  state = jit_env_reset(rng=rng)

  def generate_sine_wave(t, frequency, amplitude):
      return amplitude * jp.sin(2 * jp.pi * frequency * t)

  freq = 1
  amp = 0.5

  for j in range(100):
    # print(i)
    rollout.append(state.pipeline_state)
    # act = jp.ones(env.sys.act_size()) * generate_sine_wave(j, freq, amp)
    if i < 10:
      act = jp.zeros(env.sys.act_size())
    else:
      act = jp.ones(env.sys.act_size()) * generate_sine_wave(i, freq, amp)
    state = jit_env_step(state, act)
  hfov = 58.0
  vfov = hfov * 500 / 1000
  camera = Camera(
          viewWidth=1000,
          viewHeight=500,
          position=[2, -8, 2],
          target=state.pipeline_state.x.pos[0, :],
          up=[0, 0, 1],
          hfov=hfov,
          vfov=vfov)
  output = image.render(env.sys.replace(dt=env.dt), rollout, 1000, 500, cameras=[camera]*len(rollout), fmt="GIF")
  img = Image.open(io.BytesIO(output))
  img.save(f"../output/gif/random_morph_{i}.gif", format="GIF", save_all=True)
  img.show()

  HTML(html.render(env.sys.replace(dt=env.dt), rollout))
  html.save(f"../output/html_dynamic/random_morph_{i}.html", env.sys.replace(dt=env.dt), rollout)

#@title Visualizing a trajectory of the learned inference function

# create an env with auto-reset

